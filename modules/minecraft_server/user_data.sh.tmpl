#!/bin/bash
echo "Starting bootstrap..."

# ----------- Input Variables -------------
VOLUME_ID="${ebs_volume_id}"
DEVICE_NAME="${device_name}"  # AWS device name (e.g., /dev/sdf)
MOUNTPOINT="${mountpoint}"
REGION="${aws_region}"
EIP="${elastic_ip}"
SERVER_MEMORY="${server_memory}"
SERVER_NAME="${name}"
CF_API_KEY_ESCAPED="$(printf '%s' ${cf_api_key_escaped} | sed 's/\$/\$\$/g')"
MODPACK="${modpack}"

# ----------- Derived Values --------------
INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

# Install dependencies
yum update -y
yum install -y jq file util-linux

# ----------- Wait for Volume to Become Available -------------
wait_for_volume() {
  echo "Waiting for volume $VOLUME_ID to become available..."
  while true; do
    state=$(aws ec2 describe-volumes --volume-ids "$VOLUME_ID" --region "$REGION" --query 'Volumes[0].State' --output text)
    if [ "$state" == "available" ]; then
      break
    fi
    echo "Volume state is $state. Sleeping 5s..."
    sleep 5
  done
}
wait_for_volume

# ----------- Attach the Volume -------------
attach_volume() {
  retries=5
  for i in $(seq 1 $retries); do
    echo "Attempting to attach volume (try $i)..."
    aws ec2 attach-volume --volume-id "$VOLUME_ID" --instance-id "$INSTANCE_ID" --device "$DEVICE_NAME" --region "$REGION" && return 0
    sleep $((i * 5))
  done
  echo "Failed to attach volume after $retries attempts"
  exit 1
}
attach_volume

# ----------- Resolve Device Name -------------
resolve_device_name() {
  echo "Resolving actual device name for EBS volume $VOLUME_ID..."

  # Query block device mappings from AWS
  DEVICE_NAME_AWS=$(aws ec2 describe-instances \
    --instance-id "$INSTANCE_ID" \
    --region "$REGION" \
    --query "Reservations[0].Instances[0].BlockDeviceMappings[?Ebs.VolumeId=='$VOLUME_ID'].DeviceName" \
    --output text)

  if [ -z "$DEVICE_NAME_AWS" ]; then
    echo "Could not find device mapping for volume $VOLUME_ID"
    exit 1
  fi

  echo "AWS device name is $DEVICE_NAME_AWS"

  # Clean name (e.g. /dev/sdf â†’ sdf)
  BASE_NAME=$(basename "$DEVICE_NAME_AWS")

  # Try possible device path formats
  for candidate in \
      "/dev/$BASE_NAME" \
      "/dev/xvd$${BASE_NAME: -1}" \
      "/dev/sd$${BASE_NAME: -1}" \
      "/dev/nvme0n1" "/dev/nvme1n1" "/dev/nvme2n1"; do

    if [ -b "$candidate" ]; then
      # Confirm device isn't already mounted somewhere else
      mountpoint=$(findmnt -n -S "$candidate" -o TARGET)
      if [ -z "$mountpoint" ]; then
        echo "Found available device: $candidate"
        LOCAL_DEVICE_NAME="$candidate"
        return 0
      else
        echo "Skipping $candidate, already mounted at $mountpoint"
      fi
    fi
  done

  echo "Failed to resolve the actual device for volume $VOLUME_ID"
  exit 1
}
resolve_device_name

# ----------- Mount the Volume -------------
mount_device() {
  if [ -b "$LOCAL_DEVICE_NAME" ]; then
    echo "Mounting $LOCAL_DEVICE_NAME to $MOUNTPOINT..."
    mkdir -p "$MOUNTPOINT"
    mount "$LOCAL_DEVICE_NAME" "$MOUNTPOINT" || {
      echo "Formatting volume with ext4..."
      mkfs -t ext4 "$LOCAL_DEVICE_NAME"
      mount "$LOCAL_DEVICE_NAME" "$MOUNTPOINT"
    }
  else
    echo "Device $LOCAL_DEVICE_NAME not found."
    exit 1
  fi
}
mount_device

# ----------- Attach the Elastic IP -------------
attach_eip() {
  if [ -n "$EIP" ]; then
    echo "Associating Elastic IP $EIP to instance $INSTANCE_ID"
    aws ec2 associate-address --instance-id "$INSTANCE_ID" --public-ip "$EIP" --allow-reassociation --region "$REGION"
  fi
}
attach_eip

# ----------- Install Docker (Amazon Linux 2 or 2023) -------------
OS_VERSION_ID=$(grep -oP '(?<=^VERSION_ID=")[^"]+' /etc/os-release)

if [[ "$OS_VERSION_ID" == "2" ]]; then
  echo "Detected Amazon Linux 2, installing Docker via amazon-linux-extras..."
  amazon-linux-extras enable docker
  yum install -y docker
else
  echo "Detected Amazon Linux 2023 or newer, installing Docker via dnf..."
  dnf install -y docker
fi

systemctl start docker
systemctl enable docker

# ----------- Install Docker Compose -------------
curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/bin/docker-compose
chmod +x /usr/bin/docker-compose

# ----------- Configure Docker Compose File -------------
echo "Creating docker-compose.yml..."
printf '%s\n' "services:
  mc:
    image: itzg/minecraft-server
    tty: true
    stdin_open: true
    ports:
      - \"25565:25565\"
    environment:
      EULA: \"TRUE\"
      MEMORY: \"$SERVER_MEMORY\"
      SERVER_NAME: \"$SERVER_NAME\"
      ALLOW_FLIGHT: \"TRUE\"
      TYPE: AUTO_CURSEFORGE
      CF_API_KEY: \"$CF_API_KEY_ESCAPED\"
      CF_SLUG: \"$MODPACK\"
    volumes:
      - \"/data:$MOUNTPOINT\"" > /opt/docker-compose.yml

# ----------- Run Minecraft Server -------------
docker-compose -f /opt/docker-compose.yml up -d

echo "Bootstrap complete."