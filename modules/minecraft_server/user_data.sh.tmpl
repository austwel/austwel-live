#!/bin/bash
echo "Starting bootstrap..."

VOLUME_ID="${ebs_volume_id}"
INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
DEVICE_NAME="${device_name}"
LOCAL_DEVICE_NAME="${local_device_name}"
MOUNTPOINT="${mountpoint}"
REGION="${aws_region}"
EIP="${elastic_ip}"

# Wait for volume to become available
wait_for_volume() {
  echo "Waiting for volume $VOLUME_ID to become available..."
  while true; do
    state=$(aws ec2 describe-volumes --volume-ids $VOLUME_ID --region $REGION --query 'Volumes[0].State' --output text)
    if [ "$state" == "available" ]; then
      break
    fi
    echo "Volume state is $state. Sleeping 5s..."
    sleep 5
  done
}
wait_for_volume

# Attach the volume
attach_volume() {
  retries=5
  for i in $(seq 1 $retries); do
    echo "Attempting to attach volume (try $i)..."
    aws ec2 attach-volume --volume-id $VOLUME_ID --instance-id $INSTANCE_ID --device $DEVICE_NAME --region $REGION && return 0
    sleep $((i * 5))
  done
  echo "Failed to attach volume after $retries attempts"
  exit 1
}
attach_volume

# Wait for device to appear
wait_for_device() {
  retries=5
  for i in $(seq 1 $retries); do
    [ -b "$LOCAL_DEVICE_NAME" ] && return 0
    echo "Waiting for $LOCAL_DEVICE_NAME to appear..."
    sleep 5
  done
  echo "Failed to find device"
  exit 1
}
wait_for_device

# Mount the volume
mount_device() {
  if [ -b "$LOCAL_DEVICE_NAME" ]; then
    mkdir -p $MOUNTPOINT
    mount $LOCAL_DEVICE_NAME $MOUNTPOINT || (mkfs -t ext4 $LOCAL_DEVICE_NAME && mount $LOCAL_DEVICE_NAME $MOUNTPOINT)
  else
    echo "Device $LOCAL_DEVICE_NAME not found."
    exit 1
  fi
}
mount_device

# Attach the Elastic IP
attach_eip() {
  if [ -n "$EIP" ]; then
    echo "Associating Elastic IP $EIP to instance $INSTANCE_ID"
    aws ec2 associate-address --instance-id $INSTANCE_ID --public-ip $EIP --allow-reassociation --region $REGION
  fi
}
attach_eip

# Install Docker
yum update -y && sudo amazon-linux-extras install docker -y
service docker start

# Install Docker Compose
curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/bin/docker-compose
chmod +x /usr/bin/docker-compose

# Configure docker compose file
echo 'services:
  mc:
    image: itzg/minecraft-server
    tty: true
    stdin_open: true
    ports:
      - "25565:25565"
    environment:
      EULA: "TRUE"
      MEMORY: "${server_memory}"
      SERVER_NAME: "${name}"
      ALLOW_FLIGHT: "TRUE"
      #CURSEFORGE
      TYPE: AUTO_CURSEFORGE
      CF_API_KEY: "${cf_api_key}"
      CF_SLUG: "${modpack}"
    volumes:
      - /data:/data
' | tee /opt/docker-compose.yml > /dev/null

# Run the server
docker-compose -f /opt/docker-compose.yml up
